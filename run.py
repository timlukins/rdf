# Autogenerated with SMOP version 
# /usr/local/bin/smop run_create.m -o run_create.py
from __future__ import division
from runtime import *

tt=10
q=1.0
r=0.5
s=0.5
d=101
w=10
mx=0
my=0
_file=''
depth=0
output=1
if (length_(varargin) >= 1):
    tt=varargin[1]
if (length_(varargin) >= 2):
    r=varargin[2]
if (length_(varargin) >= 3):
    d=varargin[3]
if (length_(varargin) >= 4):
    _file=varargin[4]
img=imread_('brick_wall.jpg')
img=double_(img) / 255.0
thetas=linspace_(0,pi / 6,tt)
radii=linspace_(0.3,1.0,tt)
stretch=linspace_(0.3,1.0,tt)
warp=linspace_(- 1.0,1.0,tt)
deltas=linspace_(61,101,tt)
gammas=linspace_(61,101,tt)
dispx=linspace_(0,0.5,tt)
dispy=linspace_(0,0,tt)
H=copy_(figure)
set_(H,'Position',[100,100,600,600])
set_(H,'DoubleBuffer','on')
set_(H,'Color','white')
if (not strcmp_(_file,'')):
    disp_(sprintf_('*** WILL RECORD MOVIE TO %s',_file))
    mov=avifile_(_file,'fps',1)
lI=zeros_(2)
lII=zeros_(2)
lIII=zeros_(2)
X=zeros_(tt,1)
Y=zeros_(tt,1)
E=zeros_(tt,1)
S=zeros_(tt,1)
R=zeros_(tt,1)
for t in arange_(1,tt).reshape(-1):
    px=(d + 1) / 2
    py=(d + 1) / 2
    if 'rotcyl' == (lower__________(_type)):
        deltas=linspace_(101,101,tt)
        gammas=linspace_(101,101,tt)
        x,y,z,f=cylindata_(r,thetas[t],d,mx,my,nargout=4)
    else:
        if 'movcyl' == (lower__________(_type)):
            x,y,z,f=cylindata_(r,0,d,dispx[t],my,nargout=4)
        else:
            if 'expcyl' == (lower__________(_type)):
                x,y,z,f=cylindata_(radii[t],0,deltas[t],mx,my,nargout=4)
            else:
                if 'expsph' == (lower__________(_type)):
                    deltas=linspace_(101,101,tt)
                    gammas=linspace_(101,101,tt)
                    x,y,z,f=spheredata_(radii[t],0,deltas[t],nargout=4)
                    deltas=linspace_(101,61,tt)
                    gammas=linspace_(101,61,tt)
                else:
                    if 'rexcyl' == (lower__________(_type)):
                        x,y,z,f=cylindata_(radii[t],thetas[t],d,nargout=4)
                    else:
                        if 'roteli' == (lower__________(_type)):
                            x,y,z,f=ellipdata_(q,r,s,thetas[t],d,nargout=4)
                        else:
                            if 'streli' == (lower__________(_type)):
                                deltas=linspace_(101,61,tt)
                                gammas=linspace_(101,101,tt)
                                x,y,z,f=ellipdata_(stretch[t],r,s,0,d,nargout=4)
                            else:
                                if 'rotqua' == (lower__________(_type)):
                                    x,y,z,f=quadricdata_(q - 1.5,r,thetas[t],d,nargout=4)
                                else:
                                    if 'wrpqua' == (lower__________(_type)):
                                        x,y,z,f=quadricdata_(q,warp[t],0,d,nargout=4)
                                    else:
                                        if 'random' == (lower__________(_type)):
                                            x,y=meshgrid_(linspace_(- 1,1,d),linspace_(- 1,1,d),nargout=2)
                                            at=rand * 6 - 3
                                            nx,ny=meshgrid_(linspace_(at,at + 0.3,d),linspace_(at,at + 0.3,d),nargout=2)
                                            z=peaks_(nx,ny) * 0.5
                                        else:
                                            disp_('Usage:  run_create(type[,totaltime,radius,density,avifile]')
                                            disp_('One of: rotcyl,expcyl,rexcyl,roteli,streli,rotqua,wrpqua, + random')
                                            disp_('Where:  rot=rotate exp=expand rex=rotate&expand str=stretch wrp=warp')
                                            disp_('And:    cyl=cylinder eli=elipsoid qua=quadric')
                                            close_(gcf)
                                            return X,Y,E,S,R
    m=(z != 0)
    if (t == 1):
        lastf=copy_(f)
        img=imresize_(img,[size_(z,1) * 1.5,size_(z,2) * 1.5])
    T=cp2tform_(lastf,f,'affine')
    wimg,xdata,ydata=imtransform_(img,T,'bicubic',nargout=3)
    cropfromx=floor_((size_(wimg,1) / 2) - (size_(z,1) / 2))
    cropfromy=floor_((size_(wimg,2) / 2) - (size_(z,2) / 2))
    wimg=wimg[cropfromx + 1:cropfromx + size_(z,1),cropfromy + 1:cropfromy + size_(z,2),:]
    dtx=deltas[t]
    dty=gammas[t]
    dx=x[px - w:py + w,px - w:py + w]
    dy=y[px - w:py + w,px - w:py + w]
    dz=z[px - w:py + w,px - w:py + w]
    nd=matlabarray([reshape_(dx,size_(dx,1) * size_(dx,2),1),reshape_(dy,size_(dy,1) * size_(dy,2),1),reshape_(dz,size_(dz,1) * size_(dz,2),1)])
    I,II,III,nz=fundforms_(dtx,dty,nd,nargout=4)
    evec,_eval=eigs_(II,2,nargout=2)
    k1=abs_(_eval[1,1]) * 24
    k2=abs_(_eval[2,2]) * 24
    r1=evec[2,:]
    r2=evec[1,:]
    disp_(sprintf_('-------------------------------- step %d of %d',t,tt))
    if (t == 1):
        lI=copy_(I)
        lII=copy_(II)
        D=matlabarray([[0,0],[0,0]])
        P=matlabarray([[0,0],[0,0]])
        lnr1=copy_(r1)
        ldtx=copy_(dtx)
        ldty=copy_(dty)
    A=I - lI
    B=II - lII
    lI=copy_(I)
    lII=copy_(II)
    Q=D + inv_([[r1],[r2]]) * B * P
    D=matlabarray([[k1,0],[0,k2]])
    P=matlabarray([[r1],[r2]])
    nr1=copy_(r1)
    R[t]=acos_(dot_(lnr1,nr1)) / pi
    lnr1=copy_(nr1)
    d1=- (dtx - ldtx)
    d2=- (dty - ldty)
    E[t]=(d1 + d2) / 2
    ldtx=copy_(dtx)
    ldty=copy_(dty)
    if (d2 == 0):
        S[t]=d1
    else:
        if (d1 == 0):
            S[t]=d2
        else:
            if (d1 > d2):
                S[t]=1 - (d2 / d1)
            else:
                S[t]=1 - (d1 / d2)
    clf
    surf_(x,y,z,'Cdata',wimg,'EdgeColor','flat','FaceLighting','flat')
    hold_('on')
    plot3_([0,r1[1]],[0,r1[2]],[z[px,py],z[px,py]],'r-')
    plot3_([0,r2[1]],[0,r2[2]],[z[px,py],z[px,py]],'g-')
    plot3_(reshape_(dx,size_(dx,1) * size_(dy,2),1),reshape_(dy,size_(dy,1) * size_(dy,2),1),reshape_(dz,size_(dz,1) * size_(dz,2),1),'r.')
    plot3_(reshape_(dx,size_(dx,1) * size_(dy,2),1),reshape_(dy,size_(dy,1) * size_(dy,2),1),reshape_(nz,size_(nz,1) * size_(nz,2),1),'b.')
    axis_('equal')
    zlim_([0,r * 2])
    view_([45,30])
    plot3_([0,0],[0,0],[z[px,py],z[px,py] + 1],'b-')
    title_(sprintf_('\\\\kappa_1 = %0.3f and \\\\kappa_2 = %0.3f',k1,k2))
    itext=sprintf_(' %0.5f & %0.5f \\\\\\\\ %0.5f & %0.5f',I[1,1],I[1,2],I[2,1],I[2,2])
    itext=sprintf_('[E,F,G]=[%0.5f,%0.5f,%0.5f]\\n[L,M,N]=[%0.5f,%0.5f,%0.5f]',I[1,1],I[1,2],I[2,2],II[1,1],II[1,2],II[2,2])
    text_('String',itext,'Position',[1.0,- 2.2,0],'FontSize',12,'FontNam','FixedWidth')
    drawnow
    if (not strcmp_(_file,'')):
        frame=getframe_(gcf)
        mov=addframe_(mov,frame)
    if (output == 1):
        writepfm_(double_(z),sprintf_('%03d.pfm',t))
        colour=uint8_(round_(wimg.dot(255)))
        imwrite_(colour,sprintf_('%03d.ppm',t),'PPM')
if (not strcmp_(_file,'')):
    mov=close_(mov)
